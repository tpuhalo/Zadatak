Priložen dijagram predstavlja genericku shemu u relacijskoj bazi podataka. 
Svaki kontakt ima adresu i spol, svaka adresa je vezana na šifarnik gradova, 
koji je vezan na šifarnik zemalja. Svi entiteti imaju surogatne (nametnute) primarne kljuceve, 
kao i neke prirodne unique kolone.


Aplikacija mora podržavati pregled svih kontakta, unos novog, ažuriranje i brisanje postojeceg kontakta
(zajedno s adresom), kao i pregled, unos, ažuriranje i brisanje iz šifranika zemalja i gradova, 
koristeci bilo koji Web browser.



1.+	Odabrati relacijsku bazu (preporucamo PostgreSQL) i razvojnu okolinu za 
	Javu (preporucamo Eclipse).

2.+	Prema modelu podataka na slici napraviti tablice u bazi i popuniti ih 
	nekim probnim podacima. Definirati neka obavezna polja po logici korištenja. 
	U projektu priložititi skriptu u SQL-u za kreiranje strukture i inicijalnih podataka.

3.+	Odabrati aplikacijski poslužitelj za Web aplikacije u Javi (koji je i servlet container),
	preporucamo Apache Tomcat

4.+	Napisati Java klase za pristup bazi podataka (Data Access sloj) koristeci JDBC. 
	Te klase jedine pristupaju bazi: citaju, pišu i brišu. Preporucamo korištenje 
	Spring JdbcTemplatea.

5.+	Napisati klase koje zaprimaju HTTP zahtjeve i šalju odgovore putem Java Servlet 
	speficikacije (Web prezentacijski sloj). Preporucamo korištenje Spring WebMVC frameworka.

6.+	Napisati JSP template za generiranje HTML stranica (tablica i formi) preko kojih 
	korisnik može ostvariti traženu funkcionalnost. Koristiti HTML5 i CSS3 za razdvajanje 
	strukture i stila prezentacije.

7.?	Prilikom unosa, ažuriranja i eventualno brisanja od drugdje referenciranih entiteta, 
	treba provesti validaciju na prezentacijskom sloju. 
	Ne ovisiti o provjerama na bazi, niti dozvoliti da korištenjem aplikacije baza dode 
	u nekonzistentno stanje.





8.+	Dokumentirati sucelje Data Access sloja i kontrolera/servleta na Web prezentacijskom 
	sloju koristeci Javadoc.

9.?	Zapakirati aplikaciju kao WAR (uz WAR datoteku potrebno je poslati i source kod).

10.+	Sav kod treba biti pisan na engleskom jeziku (ukljucujuci identifikatore i komentare), 
	dobro organiziran, bez ponavljanja, formatiran prema uobicajnim standardima programiranja u Javi. 

11.+	Po potrebi možete koristiti 3rd pary biblioteke, frameworke i alate (npr Maven), 
	ako pridonose kvaliteti rješenja.

12.+	Izgled korisnickog sucelja ne mora biti estetski dotjeran ali treba biti jasan i funkcionalan.

13.-	Funkcionalnost autentikacija i autorizacije u aplikaciji nije nužna, ali je plus.

14.-	Programiranje na klijentskoj strani (JavaScript) nije nužno ali je plus.
